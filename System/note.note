create me a sample code where making an authentication login then then the routes was separated to another file as well as the database comfiguration on nodejs and angular  project connected each other but the database uses a mysql to connect my database name
ChatGPT said:
ChatGPT
Certainly! Below is an example of how you can structure an authentication login flow in a Node.js (Express) backend, connect it to a MySQL database, and integrate it with an Angular frontend.

Backend (Node.js with Express)
1. Install the required dependencies
bash
Copy code
npm init -y
npm install express mysql2 bcryptjs jsonwebtoken dotenv cors
npm install --save-dev nodemon
2. Set up the file structure
plaintext
Copy code
project
│
├── backend
│   ├── config
│   │   └── db.js
│   ├── routes
│   │   └── auth.js
│   ├── controllers
│   │   └── authController.js
│   ├── .env
│   ├── app.js
│   └── package.json
│
└── frontend (Angular project)
3. Database configuration (backend/config/db.js)
This file will handle the MySQL connection configuration.

js
Copy code
const mysql = require('mysql2');
require('dotenv').config();

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
});

const db = pool.promise();

module.exports = db;
4. Authentication Controller (backend/controllers/authController.js)
This controller will handle login logic and JWT generation.

js
Copy code
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const db = require('../config/db');

// Login Function
const login = async (req, res) => {
  const { username, password } = req.body;

  try {
    // Check if user exists
    const [rows] = await db.execute('SELECT * FROM users WHERE username = ?', [username]);

    if (rows.length === 0) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    const user = rows[0];

    // Check password
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    // Create JWT Token
    const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET, { expiresIn: '1h' });

    res.json({ message: 'Login successful', token });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error' });
  }
};

module.exports = { login };
5. Authentication Routes (backend/routes/auth.js)
This file will handle the route for login and route middleware.

js
Copy code
const express = require('express');
const { login } = require('../controllers/authController');
const router = express.Router();

router.post('/login', login);

module.exports = router;
6. Main app file (backend/app.js)
This is where you set up Express, middlewares, and routes.

js
Copy code
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const authRoutes = require('./routes/auth');

dotenv.config();

const app = express();
const port = process.env.PORT || 5000;

app.use(cors());
app.use(express.json());

// API Routes
app.use('/api/auth', authRoutes);

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
7. Environment Variables (backend/.env)
Set up your MySQL and JWT configuration in a .env file.

makefile
Copy code
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=yourpassword
DB_NAME=yourdbname
JWT_SECRET=yourjwtsecretkey
PORT=5000
Frontend (Angular)
1. Set up the Angular project
In the frontend directory, create your Angular project if you don't have it set up already:

bash
Copy code
ng new angular-auth
cd angular-auth
ng add @angular/material
npm install axios
2. Authentication Service (frontend/src/app/auth.service.ts)
This service will handle the HTTP requests for logging in and storing the JWT token.

ts
Copy code
import { Injectable } from '@angular/core';
import axios from 'axios';

@Injectable({
  providedIn: 'root'
})
export class AuthService {

  private apiUrl = 'http://localhost:5000/api/auth';

  constructor() { }

  login(username: string, password: string) {
    return axios.post(`${this.apiUrl}/login`, { username, password });
  }

  setToken(token: string) {
    localStorage.setItem('authToken', token);
  }

  getToken() {
    return localStorage.getItem('authToken');
  }

  logout() {
    localStorage.removeItem('authToken');
  }
}
3. Login Component (frontend/src/app/login/login.component.ts)
This component will contain the login form.

ts
Copy code
import { Component } from '@angular/core';
import { AuthService } from '../auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  username: string = '';
  password: string = '';
  errorMessage: string = '';

  constructor(private authService: AuthService, private router: Router) {}

  login() {
    this.authService.login(this.username, this.password).then(response => {
      // Store the JWT token
      this.authService.setToken(response.data.token);
      // Redirect to the home page
      this.router.navigate(['/home']);
    }).catch(error => {
      this.errorMessage = error.response?.data?.message || 'Something went wrong!';
    });
  }
}
4. Login HTML Template (frontend/src/app/login/login.component.html)
This is a simple form for the user to enter credentials.

html
Copy code
<div class="login-container">
  <h2>Login</h2>
  <form (ngSubmit)="login()">
    <input type="text" [(ngModel)]="username" name="username" placeholder="Username" required />
    <input type="password" [(ngModel)]="password" name="password" placeholder="Password" required />
    <button type="submit">Login</button>
  </form>
  <div *ngIf="errorMessage" class="error">{{ errorMessage }}</div>
</div>
5. Angular Routing (frontend/src/app/app-routing.module.ts)
You should set up routes for your login page and possibly a home page after login.

ts
Copy code
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './login/login.component';

const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { path: '', redirectTo: '/login', pathMatch: 'full' }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}
6. Protecting Routes (Optional)
If you want to protect certain routes, you can create a guard to check the token before allowing access to specific pages.

7. Final Integration
The frontend and backend should now be connected via the /login API endpoint.
You should be able to log in using the credentials stored in the MySQL users table, and upon successful login, you will receive a JWT that you can store and use for protected routes.
You can extend the backend to protect routes by using middleware that checks for the JWT token.
MySQL Table
You should have a users table with a structure like this:

sql
Copy code
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(255) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL
);
When inserting users into the table, remember to hash their passwords using bcryptjs before saving them.

Conclusion
This example demonstrates how to set up a simple authentication system with Node.js, MySQL, and Angular, where the backend handles the authentication logic and database interaction, while the frontend (Angular) sends requests and manages the user session. You can expand this by adding user registration, JWT token expiration handling, and route protection.



